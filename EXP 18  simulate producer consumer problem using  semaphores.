#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>
#include <semaphore.h>
#include <unistd.h>

#define BUFFER_SIZE 5   // Size of buffer

int buffer[BUFFER_SIZE];
int in = 0, out = 0;    // Index for producer and consumer

sem_t empty;  // Counts empty slots
sem_t full;   // Counts filled slots
pthread_mutex_t mutex;  // To protect critical section

// Producer function
void *producer(void *pno) {
    int item;
    for (int i = 0; i < 10; i++) {
        item = rand() % 100;  // Produce random item

        sem_wait(&empty);     // Decrease empty slot count
        pthread_mutex_lock(&mutex);  // Enter critical section

        buffer[in] = item;
        printf("Producer %d produced %d\n", *((int *)pno), item);
        in = (in + 1) % BUFFER_SIZE;

        pthread_mutex_unlock(&mutex);  // Exit critical section
        sem_post(&full);    // Increase filled slot count

        sleep(1); // Simulate delay
    }
}

// Consumer function
void *consumer(void *cno) {
    int item;
    for (int i = 0; i < 10; i++) {
        sem_wait(&full);     // Wait for item to be available
        pthread_mutex_lock(&mutex);

        item = buffer[out];
        printf("Consumer %d consumed %d\n", *((int *)cno), item);
        out = (out + 1) % BUFFER_SIZE;

        pthread_mutex_unlock(&mutex);
        sem_post(&empty);    // Increase empty slot count

        sleep(1); // Simulate delay
    }
}

int main() {
    pthread_t pro[5], con[5];
    pthread_mutex_init(&mutex, NULL);
    sem_init(&empty, 0, BUFFER_SIZE);
    sem_init(&full, 0, 0);

    int a[5] = {1, 2, 3, 4, 5}; // Thread numbers

    for (int i = 0; i < 5; i++) {
        pthread_create(&pro[i], NULL, producer, (void *)&a[i]);
        pthread_create(&con[i], NULL, consumer, (void *)&a[i]);
    }

    for (int i = 0; i < 5; i++) {
        pthread_join(pro[i], NULL);
        pthread_join(con[i], NULL);
    }

    pthread_mutex_destroy(&mutex);
    sem_destroy(&empty);
    sem_destroy(&full);

    return 0;
}
